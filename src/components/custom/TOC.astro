---
import type { MarkdownHeading } from 'astro'

// import { generateToc } from '../../plugins/toc'
import { generateToc } from '../../../node_modules/astro-pure/plugins/toc'
import TOCHeading from './TOCHeading.astro'

interface Props {
  headings: MarkdownHeading[]
  class?: string
  id?: string
}

const { headings, class: className, ...props } = Astro.props

const toc = generateToc(headings)
---

<toc-heading class={className} {...props}>
  <h2 class='font-semibold'>目录</h2>
  <ul class='mt-4 text-card-foreground'>
    {toc.map((heading) => <TOCHeading heading={heading} />)}
  </ul>
</toc-heading>

<script>
  // 这个脚本标签仅在你想在博客文章旁显示目录时有用...
  // ...并且想要高亮显示用户当前正在阅读的章节。
  // 如果你不需要这种功能，可以直接移除这个标签。

  interface TOCLink {
    element: HTMLAnchorElement
    progressBar: HTMLElement
    slug: string
  }

  interface HeadingProgress {
    inView: boolean
    progress: number
  }

  class TOC extends HTMLElement {
    headings: HTMLElement[] = []
    tocLinks: TOCLink[] = []
    headingProgress: Record<string, HeadingProgress> = {}

    constructor() {
      super()

      // 初始化标题和目录链接
      this.headings = Array.from(
        document.querySelectorAll('article h2, article h3, article h4, article h5, article h6')
      )
      this.tocLinks = Array.from(this.querySelectorAll('a[href^="#"]')).map((link) => ({
        element: link as HTMLAnchorElement,
        progressBar: link.previousElementSibling as HTMLElement,
        slug: (link.getAttribute('href') || '').substring(1)
      }))
    }

    updatePositionAndStyle = () => {
      const windowHeight = window.innerHeight
      const pageOffset =
        window.scrollY - ((document.querySelector('#content') as HTMLElement)?.offsetTop || 0)
      const postOffset =
        ((document.querySelector('#content') as HTMLElement)?.offsetHeight || 0) + 127

      this.headings.forEach((el, index) => {
        const nextHeadingTop = this.headings[index + 1]?.offsetTop || postOffset
        const range = [el.offsetTop - pageOffset, nextHeadingTop - pageOffset - el.offsetHeight]
        const progress = (windowHeight - range[0]) / (range[1] - range[0])

        this.headingProgress[el.id] = {
          inView: range[0] < windowHeight && range[1] > 0,
          progress: Math.max(0, Math.min(1, progress))
        }
      })

      this.tocLinks.forEach(({ element: el, progressBar: bar, slug }, i) => {
        const { inView, progress } = this.headingProgress[slug]
        if (this.headingProgress[slug]) {
          el.classList.toggle('highlight', inView)
          el.classList.toggle('highlight-bg-translucent', inView)
          el.classList.toggle(
            'rounded-t-2xl',
            inView && (i == 0 || !this.headingProgress[this.tocLinks[i - 1]?.slug].inView)
          )
          el.classList.toggle(
            'rounded-b-2xl',
            inView &&
              (i == this.tocLinks.length - 1 ||
                !this.headingProgress[this.tocLinks[i + 1]?.slug].inView)
          )
          bar.classList.toggle('is-read', !inView && progress == 1)
          bar.classList.toggle('highlight-bg', inView)
          bar.style.setProperty('height', `${progress * 90}%`)
        }
      })
    }

    connectedCallback() {
      // 平滑滚动
      this.tocLinks.forEach((link) => {
        link.element.addEventListener('click', (e) => {
          e.preventDefault()
          // 推送历史记录，在URL末尾添加哈希值
          const directHeading = this.headings.find((heading) => heading.id === link.slug)
          if (directHeading) {
            // 推送历史记录，在URL末尾添加哈希值
            history.pushState(
              null,
              directHeading.textContent || '',
              link.element.getAttribute('href')
            )
            directHeading.scrollIntoView({ behavior: 'smooth' })
          } else {
            console.warn(`未找到与锚点匹配的标题：${link.slug}`)
          }
        })
      })

      // 初始加载时执行一次，并监听滚动事件
      setInterval(this.updatePositionAndStyle, 100)
      window.addEventListener('scroll', this.updatePositionAndStyle)
    }
  }

  customElements.define('toc-heading', TOC)
</script>

<style>
  toc-heading :global(.toc-item) {
    display: flow-root;
  }
</style>
